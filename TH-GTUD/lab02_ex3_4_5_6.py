# -*- coding: utf-8 -*-
"""lab02_ex3_4_5_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14XICZXiNf9tQfTq6eEUizFsufrwiSomG
"""

# ex3
# a -> h
import math
def ham_chan(f,x):
  if f(-x) == f(x):
    return True
  else:
    return False

def ham_le(f,x):
  if f(-x) == -f(x):
    return True
  else:
    return False

fa = lambda x: x**(-5)
x = -1
print("cau a: ham chan : {}".format(ham_chan(fa,x)))
print("cau a: ham le : {}".format(ham_le(fa,x)))

fb = lambda x : x**2 + x
x = -1
print("cau b: ham chan : {}".format(ham_chan(fb,x)))
print("cau b: ham le : {}".format(ham_le(fb,x)))

fc = lambda x: x**2 + 1
x = -1
print("cau c: ham chan : {}".format(ham_chan(fc,x)))
print("cau c: ham le : {}".format(ham_le(fc,x)))

fd = lambda x : x**3 + x
x = -1
print("cau d: ham chan : {}".format(ham_chan(fd,x)))
print("cau d: ham le : {}".format(ham_le(fd,x)))

fe = lambda x: abs(x**3)
x = -1
print("cau E: ham chan : {}".format(ham_chan(fe,x)))
print("cau E: ham le : {}".format(ham_le(fe,x)))

ff = lambda x: 2*x + 1
x = -1
print("cau f: ham chan : {}".format(ham_chan(ff,x)))
print("cau f: ham le : {}".format(ham_le(ff,x)))

fg = lambda x: x**4 + 3*x**2-1
print("cau g: ham chan : {}".format(ham_chan(fg,x)))
print("cau g: ham le : {}".format(ham_le(fg,x)))

fh = lambda x: 2 * abs(x) +1
print("cau H: ham chan : {}".format(ham_chan(fh,x)))
print("cau H: ham le : {}".format(ham_le(fh,x)))

#i -> n
import math
def ham_tang(f,x1,x2):
  if x1 > x2:
    if f(x1) > f(x2):
      return True
    else:
       return False 
  else:
    print("khong xet truong hop nay!")
def ham_giam(f,x1,x2):
  if x1 > x2:
    if f(x1) < f(x2):
      return True
    else:
       return False 
  else:
    print("khong xet truong hop nay!")

fi = lambda x: -x**3
x1 = 2
x2 = 1
print("cau i: ham tang: {}".format(ham_tang(fi,x1,x2)))
print("cau i: ham giam : {}".format(ham_giam(fi,x1,x2)))

fj = lambda x: -1/x**2
print("cau j: ham tang: {}".format(ham_tang(fj,x1,x2)))
print("cau j: ham giam : {}".format(ham_giam(fj,x1,x2)))

fk = lambda x: -1/x
print("cau k: ham tang: {}".format(ham_tang(fk,x1,x2)))
print("cau k: ham giam : {}".format(ham_giam(fk,x1,x2)))

fl = lambda x: 1/abs(x)
print("cau l: ham tang: {}".format(ham_tang(fl,x1,x2)))
print("cau l: ham giam : {}".format(ham_giam(fl,x1,x2)))

fm = lambda x: math.sqrt(abs(x))
print("cau m: ham tang: {}".format(ham_tang(fm,x1,x2)))
print("cau m: ham giam : {}".format(ham_giam(fm,x1,x2)))

fn = lambda x: math.sqrt(abs(-x))
print("cau n: ham tang: {}".format(ham_tang(fn,x1,x2)))
print("cau n: ham giam : {}".format(ham_giam(fn,x1,x2)))

##### ex4
from sympy import *

x = symbols("x")
f4 = x**2 + 2*x -1

print(f4)

pt = solve(f4)
print("ket qua fx = {}".format(pt))

print("x1 = {:.3f}, x2 = {:.3f}".format(pt[0].evalf(),pt[1].evalf()))

## ex5
import math
import matplotlib.pyplot as plt
import numpy as np
from sympy import *

x = symbols("x")
### cau 5 b
f5b = x**4 + 3*x**2 -1

val = np.arange(-4,4,0.1)
val_b = lambdify(x,f5b,"numpy")(val)

plt.plot(val,val_b,"r")
plt.plot('b)f(x) = x**4 + 3*x**2 -1')
plt.grid()
plt.show()
### cau 5 c
f5c = x**3 + x
val_c = lambdify(x,f5c,"numpy")(val)

plt.plot(val,val_c,"b")
plt.plot("c)f(x) = x**3 +x")
plt.grid()
plt.show()
## cau 5 d
f5d = exp(x)

val_d = lambdify(x,f5d,"numpy")(val)

plt.plot(val,val_d,"b")
plt.plot("d)f(x) = exp(x)")
plt.grid()
plt.show()

## cau 5 e 
f5e = log(x)

val_e = lambdify(x,f5e,"numpy")(val)

plt.plot(val,val_e,"b")
plt.plot("e)f(x) = log(x)")
plt.grid()
plt.show()

## cau 5 f
f5f = (x*x**2-3)/(7*x+4)

val_f = lambdify(x,f5f,"numpy")(val)

plt.plot(val,val_f,"b")
plt.plot("f)f(x) = cau f")
plt.grid()
plt.show()

## exp 6
print("cau 6:")
def f2(x):
  return x**2-3
def f1(x):
  return x+5
a= f2(0)
print("cau a: {}".format(f1(a)))
print("cau b : {}".format(f2(f1(0))))
print("cau c : {}".format(f1(f1(-5))))
print("cau d: {}".format(f2(f2(2))))